{
  "hash": "cdec77dd97f173564131ea6ed0b2e77a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Générer un rapport R Markdown\"\n---\n\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title> R </title>\n    <link rel=\"stylesheet\" href=\"R-styles.css\">\n</head>\n<body>\n    <header>\n   <p>L’extension rmarkdown est un outil puissant pour la création de documents dynamiques dans l’environnement de programmation R. Il permet d’intégrer du code R, des résultats, et des narrations dans un seul document. Voici une explication détaillée de ses caractéristiques et de son fonctionnement :\n   Les documents générés peuvent être au format HTML, PDF, Word, et bien d’autres. C’est donc un outil très pratique pour l’exportation, la communication et la diffusion de résultats d’analyse. </p>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)\n```\n:::\n\n<p>Le chunk (zone grise) juste au dessus est le chunk qui fixe les options pour l’ensemble du document. Les paramètres fixés dans ce chunk agiront pour tous les autres.\n\nPour retrouver la fiche récapitulative de RMarkdown : > Help/Cheat Sheets/ R Markdown Cheat Sheet</p>\n\n<h1>Fusion de R et Markdown</h1>\n<p>RMarkdown combine le langage de programmation R avec la syntaxe de formatage de texte Markdown. Cela permet d’écrire du texte formaté (comme en HTML ou LaTeX) tout en exécutant du code R.\n<h1>Documents Dynamiques</h1>\nLes documents RMarkdown sont dynamiques, ce qui signifie que les résultats du code R (comme les graphiques ou les tableaux) sont intégrés directement dans le document.\n<h1>Flexibilité de Format</h1>\nLes documents RMarkdown peuvent être convertis en plusieurs formats, y compris HTML, PDF et Word.\n<h1>Écriture du Document</h1>\nVous commencez par écrire un document en utilisant la syntaxe Markdown pour le texte et des blocs de code spéciaux (délimités par {r} et) pour le code R.\n<h1>Exécution et Conversion</h1>\nLorsque le document est “tricoté” (le processus de conversion), le code R est exécuté et ses résultats sont incorporés dans le document final.\n<h1>Résultats Intégrés</h1>\nLes résultats, qu’il s’agisse de sorties textuelles, de tableaux ou de graphiques, sont affichés à l’endroit exact où le bloc de code correspondant se trouve dans le texte.\n<h1>Utilisations de RMarkdown</h1>\n<br>Rapports de Données : Pour générer des rapports qui incluent à la fois l’analyse (code R) et les interprétations (texte).\n<br>Documents Académiques : Pour des articles de recherche, des thèses, où les analyses et leurs descriptions vont de pair.\n<br>Présentations : Peut être utilisé pour créer des diapositives de présentation intégrant des analyses en temps réel.\n<br>Notebooks : Pour créer des notebooks interactifs, similaires à Jupyter Notebooks, mais dans R.\n<br><strong>Avantages</strong>\n<br>Reproductibilité : Les documents RMarkdown facilitent la reproductibilité des analyses, un élément clé de la science des données.\n<br>Efficacité : Ils permettent une mise à jour automatique des résultats et des graphiques en cas de modification des données ou du code.\n<br>Polyvalence : Adapté pour une large gamme d’usages, de l’éducation à la recherche, en passant par le reporting d’entreprise.\n<br><strong>Générer le Document</strong>\n<br>Pour générer un document à partir d’un fichier RMarkdown une fois que votre analyse est terminée, vous utiliserez principalement la fonction “Knit” dans RStudio. Voici les étapes à suivre et les packages nécessaires :\n<li>Ouvrez votre fichier RMarkdown dans RStudio.</li>\n<li>Cliquez sur le bouton “Knit” dans la barre d’outils. Ce bouton se trouve généralement en haut du script RMarkdown. Il est représenté par une petite icône avec une pelote de laine et une aiguille.</li>\n<li>Choisissez le format de sortie. RMarkdown supporte plusieurs formats de sortie tels que HTML, PDF ou Word. Le format de sortie peut être spécifié dans l’en-tête YAML de votre document.</li>\n<li>Nommez et enregistrez votre fichier. RStudio générera le document dans le format choisi et vous demandera où l’enregistrer.</li>\n</p>\n\n<h1>Packages Nécessaires</h1>\n<p>Pour utiliser RMarkdown et générer des documents, vous aurez besoin de certains packages. Les plus importants sont :</p>\n\n<h2>rmarkdown</h2>\n<p>Le package principal pour travailler avec RMarkdown.</p>\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"rmarkdown\")\n```\n:::\n\n\n<h2>knitr</h2>\n<p>Utilisé pour “tricoter” le document, c’est-à-dire pour exécuter le code R et le combiner avec le texte.</p>\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"knitr\")\n```\n:::\n\n\n<h2>ggplot2 (optionnel)</h2>\n<p>Si votre analyse implique des visualisations de données.</p>\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"ggplot2\")\n```\n:::\n\n\n<h2>dplyr (optionnel)</h2>\n<p>Pour la manipulation de données.</p>\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"dplyr\")\n```\n:::\n\n\n<h2>Pour le Format PDF</h2>\n<p>Si vous souhaitez générer des documents au format PDF, vous aurez besoin d’une installation LaTeX. Une option facile est d’installer TinyTeX, une distribution LaTeX légère :</p>\n\n<h3>Installer TinyTeX :</h3>\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"tinytex\")\n#tinytex::install_tinytex()\n```\n:::\n\n\n<h2>Après l’Installation</h2>\n<p>Après avoir installé les packages nécessaires, vous pouvez simplement ouvrir votre fichier RMarkdown dans RStudio et cliquer sur “Knit” pour générer le document. Assurez-vous que toutes les dépendances de votre analyse (comme les packages R spécifiques) sont également installées et disponibles.</p>\n\n<h2>Éléments d’un document R Markdown</h2>\n<p>En-tête (préambule)</p>\n<p>La première partie du document est son en-tête. Il se situe en tout début de document, et est délimité par trois tirets (---) avant et après:\n\n\"title: \"Titre\"\nauthor: \"Prénom Nom\"\ndate: \"10 avril 2017\"\noutput: html_document\"\n</p>\n\n<p>Cet en-tête contient les métadonnées du document, comme son titre, son auteur, sa date, plus tout un tas d’options possibles qui vont permettre de configurer ou personnaliser l’ensemble du document et son rendu. Ici, par exemple, la ligne output: html_document indique que le document généré doit être au format HTML.</p>\n\n<p>Texte du document</p>\n<h3>Titres</h3>\n<pre>\n<p># pour un titre de niveau 1 (le plus grand)\n<br>## pour un titre de niveau 2\n<br>### pour un titre de niveau 3, et ainsi de suite jusqu’à ###### pour un titre de niveau 6.\n<br>Emphase\n<br>*texte* ou _texte_ pour de l’italique\n<br>**texte** ou __texte__ pour du gras\n<br>***texte*** ou ___texte___ pour gras et italique\n<br>~~texte~~ pour barrer le texte\n<br>Listes\n<br>Utilisez *, +, ou - pour les listes non ordonnées\n<br>Utilisez des nombres suivis d’un point pour les listes ordonnées</p>\n</pre>\n\n\n\n<h1> Maintenant, un exemple d'analyse cliquez sur l'image ci-dessous</h1>\n<a width=\"800\" height=\"800\" href=\"r.qmd\" class=\"image-square\"> \n    <img src='exemple.jpg'>\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}